# ##########################################################
# FlatCAM: 2D Post-processing for Manufacturing            #
# Website:      https://github.com/morgan55555             #
# File Author:  Alex Morgan (c)                            #
# Date:         4-Jun-2023                                 #
# License:      MIT Licence                                #
# ##########################################################

from appPreProcessor import PreProc


def units_to_mm(value, units):
    units = str(units).upper()
    if units == "IN":
        value = value * 25.4
    return value


def power_to_percents(value):
    return value / 255 * 100


class Snapmaker_laser_marlin(PreProc):
    include_header = True
    coordinate_format = "%.*f"
    feedrate_format = "%.*f"
    feedrate_rapid_format = feedrate_format

    def start_code(self, p):
        gcode = ";Header Start\n"
        gcode += ";header_type: laser\n"
        gcode += ";renderMethod: line\n"
        gcode += ";is_rotate: false\n"

        units = p["units"]

        xmin = units_to_mm(p["options"]["xmin"], units)
        xmax = units_to_mm(p["options"]["xmax"], units)
        ymin = units_to_mm(p["options"]["ymin"], units)
        ymax = units_to_mm(p["options"]["ymax"], units)

        xmin_str = "%.*f" % (p.coords_decimals, xmin)
        xmax_str = "%.*f" % (p.coords_decimals, xmax)
        ymin_str = "%.*f" % (p.coords_decimals, ymin)
        ymax_str = "%.*f" % (p.coords_decimals, ymax)

        gcode += ";max_x(mm): " + "{: >9s}".format(xmax_str) + "\n"
        gcode += ";max_y(mm): " + "{: >9s}".format(ymax_str) + "\n"
        gcode += ";max_z(mm): 0\n"
        gcode += ";max_b(mm): 0\n"
        gcode += ";min_x(mm): " + "{: >9s}".format(xmin_str) + "\n"
        gcode += ";min_y(mm): " + "{: >9s}".format(ymin_str) + "\n"
        gcode += ";min_b(mm): 0\n"
        gcode += ";min_z(mm): 0\n"

        workspeed = units_to_mm(p["feedrate"], units)
        jogspeed = units_to_mm(p["feedrate_rapid"], units)

        gcode += ";work_speed(mm/minute): " + str(workspeed) + "\n"
        gcode += ";jog_speed(mm/minute): " + str(jogspeed) + "\n"

        power = power_to_percents(p["spindlespeed"])

        gcode += ";power(%): " + str(power) + "\n"

        gcode += ";Header End\n"

        gcode += "\n"
        gcode += "; Laser single-pass, pass 1 with Z = 0\n"
        gcode += "; G-code for laser engraving\n"
        gcode += "; Generated by FlatCAM Beta\n"
        gcode += "; G-code START <<<\n"

        gcode += "G90\n"
        gcode += ("G20" if p.units.upper() == "IN" else "G21")

        return gcode

    def startz_code(self, p):
        if p.startz is not None:
            return "G0 Z" + self.coordinate_format % (p.coords_decimals, p.z_move)
        else:
            return ""

    def lift_code(self, p):
        gcode = "M400\n"
        gcode += "M5"
        return gcode

    def down_code(self, p):
        if p.spindlespeed:
            power = power_to_percents(p.spindlespeed)
            return "M3 P%s" % (str(power))
        else:
            return "M3"

    def toolchange_code(self, p):
        return ""

    def up_to_zero_code(self, p):
        gcode = "M400\n"
        gcode += "M5"
        return gcode

    def position_code(self, p):
        return ("X" + self.coordinate_format + " Y" + self.coordinate_format) % \
               (p.coords_decimals, p.x, p.coords_decimals, p.y)

    def rapid_code(self, p):
        return ("G0 " + self.position_code(p)).format(**p) + " " + self.feedrate_rapid_code(p)

    def linear_code(self, p):
        return ("G1 " + self.position_code(p)).format(**p) + " " + self.inline_feedrate_code(p)

    def end_code(self, p):
        gcode = "M107 P0\n"
        gcode += "; G-code END <<<\n"

        coords_xy = p["xy_end"]
        gcode += ("G0 Z" + self.feedrate_format % (p.fr_decimals, p.z_end) + " " + self.feedrate_rapid_code(p) + "\n")

        if coords_xy and coords_xy != "":
            gcode += "G0 X{x} Y{y}".format(x=coords_xy[0], y=coords_xy[1]) + " " + self.feedrate_rapid_code(p) + "\n"

        return gcode

    def feedrate_code(self, p):
        return "G1 F" + str(self.feedrate_format % (p.fr_decimals, p.feedrate))

    def z_feedrate_code(self, p):
        return "G1 F" + str(self.feedrate_format % (p.fr_decimals, p.z_feedrate))

    def inline_feedrate_code(self, p):
        return "F" + self.feedrate_format % (p.fr_decimals, p.feedrate)

    def feedrate_rapid_code(self, p):
        return "F" + self.feedrate_rapid_format % (p.fr_decimals, p.feedrate_rapid)

    def spindle_code(self, p):
        gcode = "M106 P0 S255\n"
        if p.spindlespeed:
            power = power_to_percents(p.spindlespeed)
            gcode += "M3 P%s" % (str(power))
        else:
            gcode += "M3"
        return gcode

    def dwell_code(self, p):
        return ""

    def spindle_stop_code(self, p):
        gcode = "M400\n"
        gcode += "M5\n"
        gcode += "M107 P0\n"
        return gcode
