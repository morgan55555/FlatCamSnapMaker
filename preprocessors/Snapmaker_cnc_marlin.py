# ##########################################################
# FlatCAM: 2D Post-processing for Manufacturing            #
# Website:      https://github.com/morgan55555             #
# File Author:  Alex Morgan (c)                            #
# Date:         4-Jun-2023                                 #
# License:      MIT Licence                                #
# ##########################################################

from appPreProcessor import PreProc

MAX_RPM = 12000


def units_to_mm(value, units):
    units = str(units).upper()
    if units == "IN":
        value = value * 25.4
    return value


def rpm_to_power(value):
    return value / MAX_RPM * 100


class Snapmaker_cnc_marlin(PreProc):
    include_header = True
    coordinate_format = "%.*f"
    feedrate_format = "%.*f"
    feedrate_rapid_format = feedrate_format

    def start_code(self, p):
        gcode = ";Header Start\n"
        gcode += ";header_type: cnc\n"
        gcode += ";renderMethod: line\n"
        gcode += ";is_rotate: false\n"

        units = p["units"]

        xmin = units_to_mm(p["obj_options"]["xmin"], units)
        xmax = units_to_mm(p["obj_options"]["xmax"], units)
        ymin = units_to_mm(p["obj_options"]["ymin"], units)
        ymax = units_to_mm(p["obj_options"]["ymax"], units)
        zmin = units_to_mm(p['z_cut'], units)
        zmax = units_to_mm(p['z_move'], units)

        xmin_str = "%.*f" % (p.coords_decimals, xmin)
        xmax_str = "%.*f" % (p.coords_decimals, xmax)
        ymin_str = "%.*f" % (p.coords_decimals, ymin)
        ymax_str = "%.*f" % (p.coords_decimals, ymax)
        zmin_str = "%.*f" % (p.coords_decimals, zmin)
        zmax_str = "%.*f" % (p.coords_decimals, zmax)

        gcode += ";max_x(mm): " + "{: >9s}".format(xmax_str) + "\n"
        gcode += ";max_y(mm): " + "{: >9s}".format(ymax_str) + "\n"
        gcode += ";max_z(mm): " + "{: >9s}".format(zmax_str) + "\n"
        gcode += ";max_b(mm): 0\n"
        gcode += ";min_x(mm): " + "{: >9s}".format(xmin_str) + "\n"
        gcode += ";min_y(mm): " + "{: >9s}".format(ymin_str) + "\n"
        gcode += ";min_b(mm): 0\n"
        gcode += ";min_z(mm): " + "{: >9s}".format(zmin_str) + "\n"

        workspeed = units_to_mm(p["feedrate"], units)
        jogspeed = units_to_mm(p["feedrate_rapid"], units)

        gcode += ";work_speed(mm/minute): " + str(workspeed) + "\n"
        gcode += ";jog_speed(mm/minute): " + str(jogspeed) + "\n"

        spindlespeed = rpm_to_power(p["spindlespeed"])

        gcode += ";power(%): " + str(spindlespeed) + "\n"

        gcode += ";Header End\n"

        gcode += "\n"
        gcode += "; G-code for CNC machining\n"
        gcode += "; Generated by FlatCAM Beta\n"
        gcode += "; G-code START <<<\n"

        gcode += "G90\n"
        gcode += ("G20" if p.units.upper() == "IN" else "G21")

        return gcode

    def startz_code(self, p):
        if p.startz is not None:
            return 'G0 Z' + self.coordinate_format % (p.coords_decimals, p.startz)
        else:
            return ''

    def lift_code(self, p):
        return 'G0 Z' + self.coordinate_format % (p.coords_decimals, p.z_move) + " " + self.feedrate_rapid_code(p)

    def down_code(self, p):
        return 'G1 Z' + self.coordinate_format % (p.coords_decimals, p.z_cut) + " " + self.inline_z_feedrate_code(p)

    def toolchange_code(self, p):
        z_toolchange = p.z_toolchange
        toolchangexy = p.xy_toolchange
        f_plunge = p.f_plunge

        if toolchangexy is not None:
            x_toolchange = toolchangexy[0]
            y_toolchange = toolchangexy[1]
        else:
            x_toolchange = 0.0
            y_toolchange = 0.0

        no_drills = 1

        if int(p.tool) == 1 and p.startz is not None:
            z_toolchange = p.startz

        toolC_formatted = '%.*f' % (p.decimals, p.toolC)

        if str(p['obj_options']['type']) == 'Excellon':
            no_drills = p['tools'][int(p['tool'])]['nr_drills']

            if toolchangexy is not None:
                gcode = """
M5
G0 Z{z_toolchange}
G0 X{x_toolchange} Y{y_toolchange}                
T{tool}
M6
;MSG, Change to Tool Dia = {toolC}, Total drills for tool T{tool} = {t_drills}
M0
G0 Z{z_toolchange}
""".format(x_toolchange=self.coordinate_format % (p.coords_decimals, x_toolchange),
           y_toolchange=self.coordinate_format % (p.coords_decimals, y_toolchange),
           z_toolchange=self.coordinate_format % (p.coords_decimals, z_toolchange),
           tool=int(p.tool),
           t_drills=no_drills,
           toolC=toolC_formatted)
            else:
                gcode = """
M5
G0 Z{z_toolchange}
T{tool}
M6
;MSG, Change to Tool Dia = {toolC}, Total drills for tool T{tool} = {t_drills}
M0
G0 Z{z_toolchange}
""".format(z_toolchange=self.coordinate_format % (p.coords_decimals, z_toolchange),
           tool=int(p.tool),
           t_drills=no_drills,
           toolC=toolC_formatted)

            if f_plunge is True:
                gcode += '\nG0 Z%.*f' % (p.coords_decimals, p.z_move)
            return gcode

        else:
            if toolchangexy is not None:
                gcode = """
M5
G0 Z{z_toolchange}
G0 X{x_toolchange} Y{y_toolchange}
T{tool}
M6    
;MSG, Change to Tool Dia = {toolC}
M0
G0 Z{z_toolchange}
""".format(x_toolchange=self.coordinate_format % (p.coords_decimals, x_toolchange),
           y_toolchange=self.coordinate_format % (p.coords_decimals, y_toolchange),
           z_toolchange=self.coordinate_format % (p.coords_decimals, z_toolchange),
           tool=int(p.tool),
           toolC=toolC_formatted)
            else:
                gcode = """
M5
G0 Z{z_toolchange}
T{tool}
M6    
;MSG, Change to Tool Dia = {toolC}
M0
G0 Z{z_toolchange}
""".format(z_toolchange=self.coordinate_format % (p.coords_decimals, z_toolchange),
           tool=int(p.tool),
           toolC=toolC_formatted)

            if f_plunge is True:
                gcode += '\nG0 Z%.*f' % (p.coords_decimals, p.z_move)
            return gcode

    def up_to_zero_code(self, p):
        return 'G1 Z0' + " " + self.feedrate_code(p)

    def position_code(self, p):
        # formula for skewing on x for example is:
        # x_fin = x_init + y_init/slope where slope = p._bed_limit_y / p._bed_skew_x (a.k.a tangent)
        if p._bed_skew_x == 0:
            x_pos = p.x + p._bed_offset_x
        else:
            x_pos = (p.x + p._bed_offset_x) + ((p.y / p._bed_limit_y) * p._bed_skew_x)

        if p._bed_skew_y == 0:
            y_pos = p.y + p._bed_offset_y
        else:
            y_pos = (p.y + p._bed_offset_y) + ((p.x / p._bed_limit_x) * p._bed_skew_y)

        return ('X' + self.coordinate_format + ' Y' + self.coordinate_format) % \
               (p.coords_decimals, x_pos, p.coords_decimals, y_pos)

    def rapid_code(self, p):
        return ('G0 ' + self.position_code(p)).format(**p) + " " + self.feedrate_rapid_code(p)

    def linear_code(self, p):
        return ('G1 ' + self.position_code(p)).format(**p) + " " + self.inline_feedrate_code(p)

    def end_code(self, p):
        coords_xy = p['xy_end']
        gcode = ('G0 Z' + self.feedrate_format % (p.fr_decimals, p.z_end) + " " + self.feedrate_rapid_code(p) + "\n")

        if coords_xy and coords_xy != '':
            gcode += 'G0 X{x} Y{y}'.format(x=coords_xy[0], y=coords_xy[1]) + " " + self.feedrate_rapid_code(p) + "\n"

        return gcode

    def feedrate_code(self, p):
        return 'G1 F' + str(self.feedrate_format % (p.fr_decimals, p.feedrate))

    def inline_feedrate_code(self, p):
        return 'F' + self.feedrate_format % (p.fr_decimals, p.feedrate)

    def inline_z_feedrate_code(self, p):
        return 'F' + self.feedrate_format % (p.fr_decimals, p.z_feedrate)

    def z_feedrate_code(self, p):
        return 'G1 F' + str(self.feedrate_format % (p.fr_decimals, p.z_feedrate))

    def feedrate_rapid_code(self, p):
        return 'F' + self.feedrate_rapid_format % (p.fr_decimals, p.feedrate_rapid)

    def spindle_code(self, p):
        sdir = {'CW': 'M3', 'CCW': 'M4'}[p.spindledir]
        if p.spindlespeed:
            spindlespeed = rpm_to_power(p.spindlespeed)
            return '%s P%s' % (sdir, str(spindlespeed))
        else:
            return sdir

    def dwell_code(self, p):
        gcode = 'G4 P' + str(p.dwelltime)
        if p.dwelltime:
            return gcode

    def spindle_stop_code(self, p):
        gcode = 'M400\n'
        gcode += 'M5'
        return gcode